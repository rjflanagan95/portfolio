{"version":3,"sources":["components/PortfolioItem/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["PortfolioItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","subtitle","text","githubLink","hostLink","image","projectLinks","react_default","a","createElement","className","href","Card","CardImg","src","CardBody","CardTitle","CardSubtitle","CardText","Component","Main","projects","bioImage","personalGithub","githubImg","linkedIn","linkedinImg","resume","Container","Row","Col","xs","alt","map","val","index","components_PortfolioItem","key","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39ee02e3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle } from \"reactstrap\";\nimport \"./style.css\";\n\nclass PortfolioItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: this.props.title,\n      subtitle: this.props.subtitle,\n      text: this.props.text,\n      githubLink: this.props.githubLink,\n      hostLink: this.props.hostLink,\n      image: this.props.image\n    }\n  }\n  render() {\n    const hostLink = this.state.hostLink;\n    let projectLinks;\n    if (hostLink === \"\") {\n      projectLinks = <p><a className=\"codeLink\" href={this.state.githubLink}>Code base</a></p>\n    } else {\n      projectLinks = <p><a className=\"codeLink\" href={this.state.githubLink}>Code base</a> || <a className=\"codeLink\" href={this.state.hostLink}>Deployed site</a></p>\n    }\n    return (\n      <Card className=\"projectCard\">\n        <CardImg className=\"projectImage\" src={this.state.image}/>\n        <CardBody className=\"projectBody\">\n          <CardTitle className=\"projectTitle\">{this.state.title}</CardTitle>\n          <CardSubtitle className=\"projectTech\">{this.state.subtitle}</CardSubtitle>\n          <CardText className=\"projectText\">{this.state.text}</CardText>\n          <div className=\"projectLinksArea\">{projectLinks}</div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default PortfolioItem;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText } from \"reactstrap\";\nimport PortfolioItem from \"../PortfolioItem/index.js\";\nimport projects from \"../../projects.json\";\nimport \"./style.css\";\n\nclass Main extends Component {\n  state = {\n    projects,\n    bioImage: \"../assets/cardimage.jpg\",\n    personalGithub: \"https://github.com/rjflanagan95\",\n    githubImg: \"../assets/githubicon.png\",\n    linkedIn: \"https://www.linkedin.com/in/robertjflanagan\",\n    linkedinImg: \"../assets/linkedinicon.png\",\n    resume: \"https://drive.google.com/file/d/1QxDjM5YNukcydPeyycHjcOuUW98j2Lcm/view?usp=sharing\"\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col xs=\"3\">\n            <Card className=\"bioCard\">\n              <CardImg className=\"bioImage\" src={this.state.bioImage}/>\n              <CardBody className=\"bioBody\">\n                <CardTitle className=\"bioTitle\">Robert Flanagan</CardTitle>\n                <CardSubtitle className=\"bioContent\">Brooklyn, NY</CardSubtitle>\n                <CardText className=\"bioText\">\n                  <p className=\"bio\">\n                    Full-stack developer.\n                  </p>\n                  <p className=\"skills\">\n                    Skills: JavaScript (jQuery, Node.js, Express.js, React.js), HTML + CSS, Bootstrap, Handlebars, MySQL, MongoDB, Firebase\n                  </p>\n                  <div className=\"bioLinksArea\">\n                    <p><a className=\"socialLink\" href={this.state.personalGithub}>GitHub </a><img className=\"socialIcon\" src={this.state.githubImg} alt=\"GitHub icon\"/></p>\n                    <p><a className=\"socialLink\" href={this.state.linkedIn}>LinkedIn </a><img className=\"socialIcon\" src={this.state.linkedinImg} alt=\"LinkedIn icon\"/></p>\n                    <p><a className=\"socialLink\" href={this.state.resume}>Resume</a></p>\n                  </div>\n                </CardText>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col className=\"portfolioArea\">\n            {this.state.projects.map((val, index) => \n              <PortfolioItem className=\"portfolioItem\" key={index} title={val.title} subtitle={val.subtitle} text={val.text} githubLink={val.githubLink} hostLink={val.hostLink} image={val.image}/>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Main from \"./components/Main\";\n\nclass App extends Component {\n  render() {\n    return <Main />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}